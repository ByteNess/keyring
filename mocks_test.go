// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package keyring

import (
	"context"

	"github.com/1Password/connect-sdk-go/onepassword"
	onepassword0 "github.com/1password/onepassword-sdk-go"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOPConnectClientAPI creates a new instance of MockOPConnectClientAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOPConnectClientAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOPConnectClientAPI {
	mock := &MockOPConnectClientAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOPConnectClientAPI is an autogenerated mock type for the OPConnectClientAPI type
type MockOPConnectClientAPI struct {
	mock.Mock
}

type MockOPConnectClientAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOPConnectClientAPI) EXPECT() *MockOPConnectClientAPI_Expecter {
	return &MockOPConnectClientAPI_Expecter{mock: &_m.Mock}
}

// CreateItem provides a mock function for the type MockOPConnectClientAPI
func (_mock *MockOPConnectClientAPI) CreateItem(item *onepassword.Item, vaultQuery string) (*onepassword.Item, error) {
	ret := _mock.Called(item, vaultQuery)

	if len(ret) == 0 {
		panic("no return value specified for CreateItem")
	}

	var r0 *onepassword.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*onepassword.Item, string) (*onepassword.Item, error)); ok {
		return returnFunc(item, vaultQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(*onepassword.Item, string) *onepassword.Item); ok {
		r0 = returnFunc(item, vaultQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*onepassword.Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*onepassword.Item, string) error); ok {
		r1 = returnFunc(item, vaultQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOPConnectClientAPI_CreateItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateItem'
type MockOPConnectClientAPI_CreateItem_Call struct {
	*mock.Call
}

// CreateItem is a helper method to define mock.On call
//   - item *onepassword.Item
//   - vaultQuery string
func (_e *MockOPConnectClientAPI_Expecter) CreateItem(item interface{}, vaultQuery interface{}) *MockOPConnectClientAPI_CreateItem_Call {
	return &MockOPConnectClientAPI_CreateItem_Call{Call: _e.mock.On("CreateItem", item, vaultQuery)}
}

func (_c *MockOPConnectClientAPI_CreateItem_Call) Run(run func(item *onepassword.Item, vaultQuery string)) *MockOPConnectClientAPI_CreateItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *onepassword.Item
		if args[0] != nil {
			arg0 = args[0].(*onepassword.Item)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOPConnectClientAPI_CreateItem_Call) Return(item1 *onepassword.Item, err error) *MockOPConnectClientAPI_CreateItem_Call {
	_c.Call.Return(item1, err)
	return _c
}

func (_c *MockOPConnectClientAPI_CreateItem_Call) RunAndReturn(run func(item *onepassword.Item, vaultQuery string) (*onepassword.Item, error)) *MockOPConnectClientAPI_CreateItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteItemByID provides a mock function for the type MockOPConnectClientAPI
func (_mock *MockOPConnectClientAPI) DeleteItemByID(itemUUID string, vaultQuery string) error {
	ret := _mock.Called(itemUUID, vaultQuery)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItemByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(itemUUID, vaultQuery)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOPConnectClientAPI_DeleteItemByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteItemByID'
type MockOPConnectClientAPI_DeleteItemByID_Call struct {
	*mock.Call
}

// DeleteItemByID is a helper method to define mock.On call
//   - itemUUID string
//   - vaultQuery string
func (_e *MockOPConnectClientAPI_Expecter) DeleteItemByID(itemUUID interface{}, vaultQuery interface{}) *MockOPConnectClientAPI_DeleteItemByID_Call {
	return &MockOPConnectClientAPI_DeleteItemByID_Call{Call: _e.mock.On("DeleteItemByID", itemUUID, vaultQuery)}
}

func (_c *MockOPConnectClientAPI_DeleteItemByID_Call) Run(run func(itemUUID string, vaultQuery string)) *MockOPConnectClientAPI_DeleteItemByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOPConnectClientAPI_DeleteItemByID_Call) Return(err error) *MockOPConnectClientAPI_DeleteItemByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOPConnectClientAPI_DeleteItemByID_Call) RunAndReturn(run func(itemUUID string, vaultQuery string) error) *MockOPConnectClientAPI_DeleteItemByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemByUUID provides a mock function for the type MockOPConnectClientAPI
func (_mock *MockOPConnectClientAPI) GetItemByUUID(uuid string, vaultQuery string) (*onepassword.Item, error) {
	ret := _mock.Called(uuid, vaultQuery)

	if len(ret) == 0 {
		panic("no return value specified for GetItemByUUID")
	}

	var r0 *onepassword.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*onepassword.Item, error)); ok {
		return returnFunc(uuid, vaultQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *onepassword.Item); ok {
		r0 = returnFunc(uuid, vaultQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*onepassword.Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(uuid, vaultQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOPConnectClientAPI_GetItemByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemByUUID'
type MockOPConnectClientAPI_GetItemByUUID_Call struct {
	*mock.Call
}

// GetItemByUUID is a helper method to define mock.On call
//   - uuid string
//   - vaultQuery string
func (_e *MockOPConnectClientAPI_Expecter) GetItemByUUID(uuid interface{}, vaultQuery interface{}) *MockOPConnectClientAPI_GetItemByUUID_Call {
	return &MockOPConnectClientAPI_GetItemByUUID_Call{Call: _e.mock.On("GetItemByUUID", uuid, vaultQuery)}
}

func (_c *MockOPConnectClientAPI_GetItemByUUID_Call) Run(run func(uuid string, vaultQuery string)) *MockOPConnectClientAPI_GetItemByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOPConnectClientAPI_GetItemByUUID_Call) Return(item *onepassword.Item, err error) *MockOPConnectClientAPI_GetItemByUUID_Call {
	_c.Call.Return(item, err)
	return _c
}

func (_c *MockOPConnectClientAPI_GetItemByUUID_Call) RunAndReturn(run func(uuid string, vaultQuery string) (*onepassword.Item, error)) *MockOPConnectClientAPI_GetItemByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetItems provides a mock function for the type MockOPConnectClientAPI
func (_mock *MockOPConnectClientAPI) GetItems(vaultQuery string) ([]onepassword.Item, error) {
	ret := _mock.Called(vaultQuery)

	if len(ret) == 0 {
		panic("no return value specified for GetItems")
	}

	var r0 []onepassword.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]onepassword.Item, error)); ok {
		return returnFunc(vaultQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []onepassword.Item); ok {
		r0 = returnFunc(vaultQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]onepassword.Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(vaultQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOPConnectClientAPI_GetItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItems'
type MockOPConnectClientAPI_GetItems_Call struct {
	*mock.Call
}

// GetItems is a helper method to define mock.On call
//   - vaultQuery string
func (_e *MockOPConnectClientAPI_Expecter) GetItems(vaultQuery interface{}) *MockOPConnectClientAPI_GetItems_Call {
	return &MockOPConnectClientAPI_GetItems_Call{Call: _e.mock.On("GetItems", vaultQuery)}
}

func (_c *MockOPConnectClientAPI_GetItems_Call) Run(run func(vaultQuery string)) *MockOPConnectClientAPI_GetItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOPConnectClientAPI_GetItems_Call) Return(items []onepassword.Item, err error) *MockOPConnectClientAPI_GetItems_Call {
	_c.Call.Return(items, err)
	return _c
}

func (_c *MockOPConnectClientAPI_GetItems_Call) RunAndReturn(run func(vaultQuery string) ([]onepassword.Item, error)) *MockOPConnectClientAPI_GetItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemsByTitle provides a mock function for the type MockOPConnectClientAPI
func (_mock *MockOPConnectClientAPI) GetItemsByTitle(title string, vaultQuery string) ([]onepassword.Item, error) {
	ret := _mock.Called(title, vaultQuery)

	if len(ret) == 0 {
		panic("no return value specified for GetItemsByTitle")
	}

	var r0 []onepassword.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]onepassword.Item, error)); ok {
		return returnFunc(title, vaultQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []onepassword.Item); ok {
		r0 = returnFunc(title, vaultQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]onepassword.Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(title, vaultQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOPConnectClientAPI_GetItemsByTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemsByTitle'
type MockOPConnectClientAPI_GetItemsByTitle_Call struct {
	*mock.Call
}

// GetItemsByTitle is a helper method to define mock.On call
//   - title string
//   - vaultQuery string
func (_e *MockOPConnectClientAPI_Expecter) GetItemsByTitle(title interface{}, vaultQuery interface{}) *MockOPConnectClientAPI_GetItemsByTitle_Call {
	return &MockOPConnectClientAPI_GetItemsByTitle_Call{Call: _e.mock.On("GetItemsByTitle", title, vaultQuery)}
}

func (_c *MockOPConnectClientAPI_GetItemsByTitle_Call) Run(run func(title string, vaultQuery string)) *MockOPConnectClientAPI_GetItemsByTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOPConnectClientAPI_GetItemsByTitle_Call) Return(items []onepassword.Item, err error) *MockOPConnectClientAPI_GetItemsByTitle_Call {
	_c.Call.Return(items, err)
	return _c
}

func (_c *MockOPConnectClientAPI_GetItemsByTitle_Call) RunAndReturn(run func(title string, vaultQuery string) ([]onepassword.Item, error)) *MockOPConnectClientAPI_GetItemsByTitle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateItem provides a mock function for the type MockOPConnectClientAPI
func (_mock *MockOPConnectClientAPI) UpdateItem(item *onepassword.Item, vaultQuery string) (*onepassword.Item, error) {
	ret := _mock.Called(item, vaultQuery)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItem")
	}

	var r0 *onepassword.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*onepassword.Item, string) (*onepassword.Item, error)); ok {
		return returnFunc(item, vaultQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(*onepassword.Item, string) *onepassword.Item); ok {
		r0 = returnFunc(item, vaultQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*onepassword.Item)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*onepassword.Item, string) error); ok {
		r1 = returnFunc(item, vaultQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOPConnectClientAPI_UpdateItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateItem'
type MockOPConnectClientAPI_UpdateItem_Call struct {
	*mock.Call
}

// UpdateItem is a helper method to define mock.On call
//   - item *onepassword.Item
//   - vaultQuery string
func (_e *MockOPConnectClientAPI_Expecter) UpdateItem(item interface{}, vaultQuery interface{}) *MockOPConnectClientAPI_UpdateItem_Call {
	return &MockOPConnectClientAPI_UpdateItem_Call{Call: _e.mock.On("UpdateItem", item, vaultQuery)}
}

func (_c *MockOPConnectClientAPI_UpdateItem_Call) Run(run func(item *onepassword.Item, vaultQuery string)) *MockOPConnectClientAPI_UpdateItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *onepassword.Item
		if args[0] != nil {
			arg0 = args[0].(*onepassword.Item)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOPConnectClientAPI_UpdateItem_Call) Return(item1 *onepassword.Item, err error) *MockOPConnectClientAPI_UpdateItem_Call {
	_c.Call.Return(item1, err)
	return _c
}

func (_c *MockOPConnectClientAPI_UpdateItem_Call) RunAndReturn(run func(item *onepassword.Item, vaultQuery string) (*onepassword.Item, error)) *MockOPConnectClientAPI_UpdateItem_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOPStandardClientAPI creates a new instance of MockOPStandardClientAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOPStandardClientAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOPStandardClientAPI {
	mock := &MockOPStandardClientAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOPStandardClientAPI is an autogenerated mock type for the OPStandardClientAPI type
type MockOPStandardClientAPI struct {
	mock.Mock
}

type MockOPStandardClientAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOPStandardClientAPI) EXPECT() *MockOPStandardClientAPI_Expecter {
	return &MockOPStandardClientAPI_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockOPStandardClientAPI
func (_mock *MockOPStandardClientAPI) Create(ctx context.Context, params onepassword0.ItemCreateParams) (onepassword0.Item, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 onepassword0.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, onepassword0.ItemCreateParams) (onepassword0.Item, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, onepassword0.ItemCreateParams) onepassword0.Item); ok {
		r0 = returnFunc(ctx, params)
	} else {
		r0 = ret.Get(0).(onepassword0.Item)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, onepassword0.ItemCreateParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOPStandardClientAPI_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOPStandardClientAPI_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params onepassword0.ItemCreateParams
func (_e *MockOPStandardClientAPI_Expecter) Create(ctx interface{}, params interface{}) *MockOPStandardClientAPI_Create_Call {
	return &MockOPStandardClientAPI_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockOPStandardClientAPI_Create_Call) Run(run func(ctx context.Context, params onepassword0.ItemCreateParams)) *MockOPStandardClientAPI_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 onepassword0.ItemCreateParams
		if args[1] != nil {
			arg1 = args[1].(onepassword0.ItemCreateParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOPStandardClientAPI_Create_Call) Return(item onepassword0.Item, err error) *MockOPStandardClientAPI_Create_Call {
	_c.Call.Return(item, err)
	return _c
}

func (_c *MockOPStandardClientAPI_Create_Call) RunAndReturn(run func(ctx context.Context, params onepassword0.ItemCreateParams) (onepassword0.Item, error)) *MockOPStandardClientAPI_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockOPStandardClientAPI
func (_mock *MockOPStandardClientAPI) Delete(ctx context.Context, vaultID string, itemID string) error {
	ret := _mock.Called(ctx, vaultID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, vaultID, itemID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOPStandardClientAPI_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockOPStandardClientAPI_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - vaultID string
//   - itemID string
func (_e *MockOPStandardClientAPI_Expecter) Delete(ctx interface{}, vaultID interface{}, itemID interface{}) *MockOPStandardClientAPI_Delete_Call {
	return &MockOPStandardClientAPI_Delete_Call{Call: _e.mock.On("Delete", ctx, vaultID, itemID)}
}

func (_c *MockOPStandardClientAPI_Delete_Call) Run(run func(ctx context.Context, vaultID string, itemID string)) *MockOPStandardClientAPI_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOPStandardClientAPI_Delete_Call) Return(err error) *MockOPStandardClientAPI_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOPStandardClientAPI_Delete_Call) RunAndReturn(run func(ctx context.Context, vaultID string, itemID string) error) *MockOPStandardClientAPI_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockOPStandardClientAPI
func (_mock *MockOPStandardClientAPI) Get(ctx context.Context, vaultID string, itemID string) (onepassword0.Item, error) {
	ret := _mock.Called(ctx, vaultID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 onepassword0.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (onepassword0.Item, error)); ok {
		return returnFunc(ctx, vaultID, itemID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) onepassword0.Item); ok {
		r0 = returnFunc(ctx, vaultID, itemID)
	} else {
		r0 = ret.Get(0).(onepassword0.Item)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, vaultID, itemID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOPStandardClientAPI_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockOPStandardClientAPI_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - vaultID string
//   - itemID string
func (_e *MockOPStandardClientAPI_Expecter) Get(ctx interface{}, vaultID interface{}, itemID interface{}) *MockOPStandardClientAPI_Get_Call {
	return &MockOPStandardClientAPI_Get_Call{Call: _e.mock.On("Get", ctx, vaultID, itemID)}
}

func (_c *MockOPStandardClientAPI_Get_Call) Run(run func(ctx context.Context, vaultID string, itemID string)) *MockOPStandardClientAPI_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOPStandardClientAPI_Get_Call) Return(item onepassword0.Item, err error) *MockOPStandardClientAPI_Get_Call {
	_c.Call.Return(item, err)
	return _c
}

func (_c *MockOPStandardClientAPI_Get_Call) RunAndReturn(run func(ctx context.Context, vaultID string, itemID string) (onepassword0.Item, error)) *MockOPStandardClientAPI_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockOPStandardClientAPI
func (_mock *MockOPStandardClientAPI) List(ctx context.Context, vaultID string, filters ...onepassword0.ItemListFilter) ([]onepassword0.ItemOverview, error) {
	var tmpRet mock.Arguments
	if len(filters) > 0 {
		tmpRet = _mock.Called(ctx, vaultID, filters)
	} else {
		tmpRet = _mock.Called(ctx, vaultID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []onepassword0.ItemOverview
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...onepassword0.ItemListFilter) ([]onepassword0.ItemOverview, error)); ok {
		return returnFunc(ctx, vaultID, filters...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...onepassword0.ItemListFilter) []onepassword0.ItemOverview); ok {
		r0 = returnFunc(ctx, vaultID, filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]onepassword0.ItemOverview)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...onepassword0.ItemListFilter) error); ok {
		r1 = returnFunc(ctx, vaultID, filters...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOPStandardClientAPI_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockOPStandardClientAPI_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - vaultID string
//   - filters ...onepassword0.ItemListFilter
func (_e *MockOPStandardClientAPI_Expecter) List(ctx interface{}, vaultID interface{}, filters ...interface{}) *MockOPStandardClientAPI_List_Call {
	return &MockOPStandardClientAPI_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, vaultID}, filters...)...)}
}

func (_c *MockOPStandardClientAPI_List_Call) Run(run func(ctx context.Context, vaultID string, filters ...onepassword0.ItemListFilter)) *MockOPStandardClientAPI_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []onepassword0.ItemListFilter
		var variadicArgs []onepassword0.ItemListFilter
		if len(args) > 2 {
			variadicArgs = args[2].([]onepassword0.ItemListFilter)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOPStandardClientAPI_List_Call) Return(itemOverviews []onepassword0.ItemOverview, err error) *MockOPStandardClientAPI_List_Call {
	_c.Call.Return(itemOverviews, err)
	return _c
}

func (_c *MockOPStandardClientAPI_List_Call) RunAndReturn(run func(ctx context.Context, vaultID string, filters ...onepassword0.ItemListFilter) ([]onepassword0.ItemOverview, error)) *MockOPStandardClientAPI_List_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockOPStandardClientAPI
func (_mock *MockOPStandardClientAPI) Put(ctx context.Context, item onepassword0.Item) (onepassword0.Item, error) {
	ret := _mock.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 onepassword0.Item
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, onepassword0.Item) (onepassword0.Item, error)); ok {
		return returnFunc(ctx, item)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, onepassword0.Item) onepassword0.Item); ok {
		r0 = returnFunc(ctx, item)
	} else {
		r0 = ret.Get(0).(onepassword0.Item)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, onepassword0.Item) error); ok {
		r1 = returnFunc(ctx, item)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOPStandardClientAPI_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockOPStandardClientAPI_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - item onepassword0.Item
func (_e *MockOPStandardClientAPI_Expecter) Put(ctx interface{}, item interface{}) *MockOPStandardClientAPI_Put_Call {
	return &MockOPStandardClientAPI_Put_Call{Call: _e.mock.On("Put", ctx, item)}
}

func (_c *MockOPStandardClientAPI_Put_Call) Run(run func(ctx context.Context, item onepassword0.Item)) *MockOPStandardClientAPI_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 onepassword0.Item
		if args[1] != nil {
			arg1 = args[1].(onepassword0.Item)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOPStandardClientAPI_Put_Call) Return(item1 onepassword0.Item, err error) *MockOPStandardClientAPI_Put_Call {
	_c.Call.Return(item1, err)
	return _c
}

func (_c *MockOPStandardClientAPI_Put_Call) RunAndReturn(run func(ctx context.Context, item onepassword0.Item) (onepassword0.Item, error)) *MockOPStandardClientAPI_Put_Call {
	_c.Call.Return(run)
	return _c
}
